/*
 * Author: Troy Aiken
 * Class: Introduction to Programming
 * Date: 01/08/2020
 */

import java.util.Scanner;
public class Blackjack21 {
	public static void main(String[] args) {
		boolean flag = true;
		Scanner input = new Scanner(System.in);
		//create Deck
		String[] deck = {"Ace of Spades", "2 of Spades", "3 of Spades", "4 of Spades", "5 of Spades", "6 of Spades", "7 of Spades", "8 of Spades", "9 of Spades", "10 of Spades", "Jack of Spades", "Queen of Spades", "King of Spades", 
				"Ace of Hearts", "2 of Hearts", "3 of Hearts", "4 of Hearts", "5 of Hearts", "6 of Hearts", "7 of Hearts", "8 of Hearts", "9 of Hearts", "10 of Hearts", "Jack of Hearts", "Queen of Hearts", "King of Hearts", 
				"Ace of Diamonds", "2 of Diamonds", "3 of Diamonds", "4 of Diamonds", "5 of Diamonds", "6 of Diamonds", "7 of Diamonds", "8 of Diamonds", "9 of Diamonds", "10 of Diamonds", "Jack of Diamonds", "Queen of Diamonds", "King of Diamonds", 
				"Ace of Clubs", "2 of Clubs", "3 of Clubs", "4 of Clubs", "5 of Clubs", "6 of Clubs", "7 of Clubs", "8 of Clubs", "9 of Clubs", "10 of Clubs", "Jack of Clubs", "Queen of Clubs", "King of Clubs"};

		
		
		double pool = 0;
		double funds = 100;
		while (flag == true) {
			int card = 0;
			int pcount = 0;
			int dcount = 0;
			//shuffle deck, card values for shuffled deck, player and dealer hands.
			String[] shuffledDeck = shuffleDeck(deck);
			int[] cardValue = getCardValue(shuffledDeck);
			String[] playersHand = new String[15];
			String[] dealersHand = new String[15];
			int[] playerHandValue = new int[15];
			int[] dealerHandValue = new int[15];
			String[] tempcard = new String[1];
			int[] tempvar = new int[1];
			String[] playersHand2 = new String[15];
			int[] playersHand2Value = new int[15];
			int playertotal2 = 0;
		
			//begin play

			System.out.println("Player Funds: $" + funds);
			System.out.println("Place a bet. Maximum bet is $" + funds);
			int bet = input.nextInt();
			pool = bet;
			funds = funds - bet;
			// deal first cards
		
			for (int i = 0; i < 2; i++){
				playersHand[pcount] = drawCard(shuffledDeck, card);
				playerHandValue[pcount] = drawCardValue(cardValue, card);
				pcount++;
				card++;
				dealersHand[dcount] = drawCard(shuffledDeck, card);
				dealerHandValue[dcount] = drawCardValue(cardValue, card);
				dcount++;
				card++;
			}
			
			//check dealers hand for Ace and swap to index 0
			int dealertotal = dealerTotal(dealerHandValue);
			int playertotal = playerTotal(playerHandValue);
		
			//print player's hand and dealer's hand
			System.out.println("							Pool: $" + pool);
			System.out.println("							Player Funds: $" + funds);	
			System.out.println("Dealer's Hand: Unknown, " + dealersHand[1]);
			System.out.println();
			System.out.print("Player's Hand: ");
			for (int j = 0; j < pcount; j++) {
				System.out.print(playersHand[j] + ", ");
			}
			System.out.println();
			System.out.println("Player Total: " + playertotal);
			if (playertotal < 21) {
				if (funds >= bet * 2){
					System.out.println("Double your bet and draw a card? (Y/N)");
					String doubleBet = input.next();
					if(doubleBet.equalsIgnoreCase("y")) {
						funds = funds + pool;
						pool = 0;
						bet = bet * 2;
						pool = bet;
						funds = funds - bet;
						//double bet and draw a card
						playersHand[pcount] = drawCard(shuffledDeck, card);
						playerHandValue[pcount] = drawCardValue(cardValue, card);
						pcount++;	
						card++;
						playertotal = playerTotal(playerHandValue);
						if (checkPlayerTotal(playertotal) == true){
							for (int id = 0; id < dcount; id++){
								if (playersHand[id].contains("Ace") && playertotal > 21) {
										playerHandValue[id] = 1;
										playertotal = playerTotal(playerHandValue);
								}
							}						
						}
					}
				}
				else {				
					while (playertotal < 21) {
						System.out.println("Draw a card? (Y/N)");
						String drawcard = input.next();
						if (drawcard.equalsIgnoreCase("y")) {
							playersHand[pcount] = drawCard(shuffledDeck, card);
							playerHandValue[pcount] = drawCardValue(cardValue, card);
							playertotal = playerTotal(playerHandValue);
							pcount++;
							card++;
							playertotal = playerTotal(playerHandValue);
							if (checkPlayerTotal(playertotal) == true){
								for (int id = 0; id < dcount; id++){
									if (playersHand[id].contains("Ace") && playertotal > 21) {
										playerHandValue[id] = 1;
										playertotal = playerTotal(playerHandValue);
									}
								}														
							}
							System.out.println("Dealer's Hand: Unknown, " + dealersHand[1]);
							System.out.println();
							System.out.print("Player's Hand: ");
							for (int i = 0; i < pcount; i++){
								System.out.print(" " + playersHand[i]);
							}
							System.out.println();
							System.out.println("Player's Total: " + playertotal);
						}
						else {
							playertotal = playerTotal(playerHandValue);
							break;
						}
					}
				}
			}
			if (checkDealerTotal(dealertotal) == true) {
				dealersHand[dcount] = drawCard(shuffledDeck, card);
				dealerHandValue[dcount] = drawCardValue(cardValue, card);
				dcount++;
				card++;
				dealertotal = dealerTotal(dealerHandValue);
				for (int w = 0; w < dcount; w++){
					if (dealersHand[w].contains("Ace") && dealertotal > 21){
						dealerHandValue[w] = 1;
						dealertotal = dealerTotal(dealerHandValue);
					}
				}
				System.out.print("Dealer's Hand: Unknown, " + dealersHand[1] + ", " + dealersHand[2]);
				System.out.println();		
			}	
			if (checkPlayerTotal(playertotal) == true){
				for (int id = 0; id < dcount; id++){
					if (playersHand[id].contains("Ace") && playertotal > 21) {
							playerHandValue[id] = 1;
							playertotal = playerTotal(playerHandValue);
					}
				}
			}
			playertotal =  playerTotal(playerHandValue);
			System.out.println("							Pool: $" + pool);
			System.out.println("							Player Funds: $" + funds);
			if (dealersHand.length == 3){	
				System.out.println("Dealer's Hand: Unknown, " + dealersHand[1] + ", " + dealersHand[2]);
			}
			else{
				System.out.println("Dealer's Hand: Unknown, " + dealersHand[1]);
			}
			System.out.print("Player's Hand: ");
			for (int j = 0; j < pcount; j++) {
				System.out.print(playersHand[j] + ", ");				
			}
			System.out.println();
			System.out.println("Player's total: " + playertotal);

			if (playertotal < 21 && playersHand.length == 3) {
				System.out.println("Draw Another Card? (Y/N)");
				String newcard = input.next();
					if (newcard.equalsIgnoreCase("y")) {
					playersHand[pcount] = drawCard(shuffledDeck, card);
					playerHandValue[pcount] = drawCardValue(cardValue, card);
					pcount++;
					card++;
					playertotal =  playerTotal(playerHandValue);
					}
			}
			System.out.println();
			while (checkDealerTotal(dealertotal) == true) {
				dealersHand[dcount] = drawCard(shuffledDeck, card);
				dealerHandValue[dcount] = drawCardValue(cardValue, card);
				dcount++;
				card++;
				dealertotal = dealerTotal(dealerHandValue);
				for (int id = 0; id < dcount; id++){
					if (dealersHand[id].contains("Ace") && dealertotal > 21) {
							dealerHandValue[id] = 1;
							dealertotal = dealerTotal(dealerHandValue);	
					}
					else{
						continue;
					}
				}	
			}
			System.out.print("Dealer's Hand: ");
			for (int a = 0; a < dcount; a++) {
				System.out.print(dealersHand[a] + ", ");
			}	
			System.out.print("Dealer's Total: " + dealertotal);
			System.out.println();
			System.out.print("Player's Hand: ");
			for (int j = 0; j < pcount; j++) {
				System.out.print(playersHand[j] + ", ");
			}
			System.out.println();
			System.out.println("Player'S Total: " + playertotal);
			playertotal = playerTotal(playerHandValue);
			dealertotal = dealerTotal(dealerHandValue);
			if (isWinner(playertotal, dealertotal) == true) {
				funds = funds + (pool * 1.5);
				pool = 0;
				System.out.println("Player funds: $" + funds);
				System.out.println("Congratulations! You win! \nPlay Again? (Y/N)");
				
				String play = input.next();
				if (play.equalsIgnoreCase("y")){
					flag = true;
				}
				else {
					flag = false;
				}				

			}
			else {
				pool = 0;
				if (funds > 0){
					System.out.println("Sorry, you loose. Play Again? (Y/N)");
					System.out.println("Player Funds: " + funds);
					String play = input.next();					
					if (play.equalsIgnoreCase("y")){
						flag = true;
					}
					else {
						flag = false;
					}				
				}
				else {
					System.out.println("Sorry, you loose. You are out of money.");
				}							
			}
		}
	}

	/**
	 * This method checks the total card value of the player's hand.
	 * @param playerHandTotal is the Array of the value of the player's hand.
	 * @return total value of the player's hand
	 */
	public static int playerTotal(int[] playerHandValue) {
		int temp = 0;
		int var = 0;
		for (int i =0; i < playerHandValue.length; i++) {
			int playertotal = playerHandValue[i];
			temp = var + playertotal;
			var = temp;				
		}
		return var;
	}
	/**
	 * This Method gets the total card value of the dealer's hand.
	 * @param dealerHandTotal is the Array of the value of the dealer's hand
	 * @return total value of the dealer's hand
	 */
	public static int dealerTotal(int[] dealerHandValue) {
		int temp = 0;
		int var = 0;
		for (int i = 0; i < dealerHandValue.length; i++) {
			int dealertotal = dealerHandValue[i];
			temp = var + dealertotal;
			var = temp;

		}
		return var;
	}
	/**
	 * This method checks the total of the dealer's hand
	 * @param dealertotal is the total card value of the dealer's hand.
	 * @return when true the dealer draws a card.
	 */
	public static Boolean checkDealerTotal(int dealertotal) {
		boolean flag = false;
		if (dealertotal <= 17) {
			flag = true;
		}
		else {
			flag = false;
		}
		return flag;
	}
	public static Boolean checkPlayerTotal( int playertotal){
		boolean flag = false;
		if (playertotal > 21){
			flag = true;
		}
		else{
			flag = false;
		}
		return flag;
	}
	/**
	 * This Method compares the totals of the player's hand and the dealer's hand.
	 * @param x uses the playertotal to compare with dealertotal
	 * @param y dealer total
	 * @return if it returns true player wins, if false player looses.
	 */
	public static Boolean isWinner(int playertotal, int dealertotal) {
		boolean flag = false;
		if (playertotal == 21) {
			flag = true;
		}
		else if (playertotal > 21) {
			flag = false;
		}
		else if (playertotal > dealertotal ) {
			flag = true;
		}
		else if (playertotal == dealertotal && playertotal <= 21) {
			flag = true;
		}
		if (dealertotal > 21 && playertotal > 21){
			flag = false;
		}
		if (dealertotal > 21 && playertotal < 21){
			flag = true;
		}
		return flag;
	}
	/**
	 * This Method fills the Array shuffledDeck with a random card from the array Deck.
	 * @param deck a deck of 52 cards in order from Ace to King.
	 * @return fills the Array shuffledDeck without copies
	 */
	public static String[] shuffleDeck(String[] deck) {
		boolean flag = false;
		String[] shuffledDeck = new String[52];	
		for (int i = 0; i < deck.length; i++){
			int index = (int)(Math.random() * deck.length);

			for (int a = 0; a < deck.length; a++){
				for (int b = 0; b < deck.length; b++){
					if (deck[a] == shuffledDeck[b]){
						flag = true;
					}
					if (!flag){
						shuffledDeck[i] = deck[index];
					}
					else{
						flag = false;
					}
				}
			}
		}			
		return shuffledDeck;
	}
	/**
	 * This Method fills an array at cardValue with the values presented with the shuffledDeck array.
	 * @param shuffledDeck Uses the Array shuffledDeck
	 * @return returns the value of each card from shuffledDeck to the Array cardValue. 
	 */
	public static int[] getCardValue(String[] shuffledDeck) {

		int[] cardValue = new int[52];
		for (int i = 0; i < 52; i++) {

			if (shuffledDeck[i].contains("King")) {
				cardValue[i] = 10;
			}
			else if (shuffledDeck[i].contains("Queen")) {
				cardValue[i] = 10;
			}
			else if (shuffledDeck[i].contains("Jack")) {
				cardValue[i] = 10;
			}
			else if (shuffledDeck[i].contains("10")) {
				cardValue[i] = 10;
			}
			else if (shuffledDeck[i].contains("9")) {
				cardValue[i] = 9;
			}
			else if (shuffledDeck[i].contains("8")) {
				cardValue[i] = 8;
			}
			else if (shuffledDeck[i].contains("7")) {
				cardValue[i] = 7;

			}
			else if (shuffledDeck[i].contains("6")) {
				cardValue[i] = 6;

			}
			else if (shuffledDeck[i].contains("5")) {
				cardValue[i] = 5;

			}
			else if (shuffledDeck[i].contains("4")) {
				cardValue[i] = 4;

			}
			else if (shuffledDeck[i].contains("3")) {
				cardValue[i] = 3;

			}
			else if (shuffledDeck[i].contains("2")) {
				cardValue[i] = 2;

			}
			else {
				cardValue[i] = 11;

			}	
		}
		return cardValue;
	}
	public static String drawCard(String[] shuffledDeck, int x){
		int cardCount = x;
		String drawCard = " ";
		String[] newCard = new String[52];
		
		for (int i = 0; i < newCard.length; i++){
			newCard[i] = shuffledDeck[i];
		}
		drawCard = newCard[cardCount];
		return drawCard;
	}
	
	public static int drawCardValue(int[] cardValue, int x){
		int cardCount = x;
		int drawCardValue = 0;
		int[] newCardValue = new int[52];
		for (int i = 0; i < newCardValue.length; i++){
			newCardValue[i] = cardValue[i];
		}
		drawCardValue = newCardValue[cardCount];
		return drawCardValue;
	}
}
